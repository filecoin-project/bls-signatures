name: CI

on:
  pull_request:
  push:
    branches: master

env:
  RUSTFLAGS: "-Dwarnings"
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  set-msrv:
    runs-on: ubuntu-latest
    outputs:
      msrv: ${{ steps.msrv.outputs.MSRV }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract MSRV from Cargo.toml
        id: msrv
        run: |
          MSRV=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].rust_version')
          echo "MSRV=$MSRV" >> "$GITHUB_OUTPUT"

  # NOTE vmx 2022-06-14: currently doesn't work, hence run it on CircleCI
  # for now.
  linux_foreign:
    strategy:
      matrix:
        include:
          # 64-bit Linux/arm64
          - target: aarch64-unknown-linux-gnu
            toolchain: nightly
            arch: aarch64

    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2.5.1
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          install: |
            apt-get update -q -y
            apt-get install -q -y ocl-icd-opencl-dev curl build-essential git
            curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal --default-toolchain ${{ matrix.toolchain }} -y
            source $HOME/.cargo/env

          run: |
            $HOME/.cargo/bin/cargo test --config net.git-fetch-with-cli=true --release --no-default-features --features pairing,multicore --target ${{ matrix.target }}
            $HOME/.cargo/bin/cargo test --config net.git-fetch-with-cli=true --release --no-default-features --features blst,multicore --target ${{ matrix.target }}
            $HOME/.cargo/bin/cargo test --config net.git-fetch-with-cli=true --release --no-default-features --features blst,multicore,blst-portable --target ${{ matrix.target }}

  # Linux tests
  linux:
    needs: set-msrv
    strategy:
      matrix:
        include:
          # 32-bit Linux/x86
          - target: i686-unknown-linux-gnu
            toolchain: ${{needs.set-msrv.outputs.msrv}}
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            toolchain: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux/x86_64
          - target: x86_64-unknown-linux-gnu
            toolchain: ${{needs.set-msrv.outputs.msrv}}
          - target: x86_64-unknown-linux-gnu
            toolchain: stable

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        run: |
          rustup toolchain install ${{ matrix.toolchain }} --target ${{ matrix.target }} --profile minimal --no-self-update
          rustup override set ${{ matrix.toolchain }}
      - name: Install opencl
        run: sudo apt-get install -y ocl-icd-opencl-dev
      - run: ${{ matrix.deps }}
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features pairing,multicore
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features pairing
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features blst
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features blst,multicore
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features blst,blst-portable
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features blst,multicore,blst-portable


  # macOS tests
  macos:
    needs: set-msrv
    strategy:
      matrix:
        toolchain:
          - ${{needs.set-msrv.outputs.msrv}}
          - stable

    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        run: |
          rustup toolchain install ${{ matrix.toolchain }} --target x86_64-apple-darwin --profile minimal --no-self-update
          rustup override set ${{ matrix.toolchain }}
      - run: cargo test --no-default-features --features pairing,multicore
      - run: cargo test --no-default-features --features pairing
      - run: cargo test --no-default-features --features blst
      - run: cargo test --no-default-features --features blst,multicore
      - run: cargo test --no-default-features --features blst,blst-portable
      - run: cargo test --no-default-features --features blst,multicore,blst-portable

 # Windows tests
  windows:
    needs: set-msrv
    strategy:
      matrix:
        include:
          # 64-bit Windows (MSVC)
          - target: x86_64-pc-windows-msvc
            toolchain: ${{needs.set-msrv.outputs.msrv}}

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        run: |
          rustup toolchain install ${{ matrix.toolchain }} --target ${{ matrix.target }} --profile minimal --no-self-update
          rustup override set ${{ matrix.toolchain }}
      - uses: msys2/setup-msys2@v2
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features pairing,multicore
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features pairing
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features blst
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features blst,multicore
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features blst,blst-portable
      - run: cargo test --target ${{ matrix.target }} --no-default-features --features blst,multicore,blst-portable

  clippy_check_blst:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup component add clippy
      - name: Run Clippy
        run: cargo clippy --workspace --no-default-features --features blst,multicore -- -D warnings

  clippy_check_pairing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup component add clippy
      - name: Run Clippy
        run: cargo clippy --workspace -- -D warnings

  check_fmt_and_docs:
    name: Checking fmt and docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: rustup component add rustfmt
    - name: Run cargo fmt
      run: cargo fmt --all -- --check
